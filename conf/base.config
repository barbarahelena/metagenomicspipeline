/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/metagenomicspipeline Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {
    cpus   = 1
    memory = 6.GB
    time   = 4.h

    errorStrategy = 'retry'
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 72.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withLabel:error_retry_humann {
        errorStrategy = 'retry'
        memory = { check_max( 24.GB * task.attempt, 'memory' ) }
        maxRetries    = 2
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }
    withName: 'KRAKEN2_DB' {
        memory = { 
            params.kraken2_dbname == 'core_nt' ? '250.GB' : 
            params.kraken2_dbname == 'standard_64gb' ? '72.GB' :
            params.kraken2_dbname == 'standard_16gb' ? '20.GB' :
            params.kraken2_dbname == 'standard_8gb' ? '12.GB' :
            { error "Unknown database name: ${params.kraken2_dbname}" }()
        }
        cpus = 24
        time = { params.kraken2_dbname == 'core_nt' ? '8h' : '3h' }
        ext.db_link = { 
            db_name == 'core_nt' ? 'k2_core_nt_20241228' :
            db_name == 'standard_64gb' ? 'k2_standard_20241228' :
            db_name == 'standard_8gb' ? 'k2_standard_08gb_20241228' :
            db_name == 'standard_16gb' ? 'k2_standard_16gb_20241228' :
            { error "Unknown database name: ${params.kraken2_dbname}" }()
        }
    }

    withName: 'KRAKEN2_KRAKEN2' {
        memory = { 
            params.kraken2_dbname == 'custom' ? '350.GB' :
            params.kraken2_dbname == 'core_nt' ? '250.GB' : 
            params.kraken2_dbname == 'standard_64gb' ? '100.GB' :
            params.kraken2_dbname == 'standard_16gb' ? '20.GB' :
            params.kraken2_dbname == 'standard_8gb' ? '12.GB' :
            '20.GB'
        }
        cpus = 12
        time = '1.h'
        queue = {
            params.kraken2_dbname == 'custom' ? 'highmem' :
            params.kraken2_dbname == 'core_nt' ? 'highmem' : 
            params.kraken2_dbname == 'standard_64gb' ? 'medium' :
            params.kraken2_dbname == 'standard_16gb' ? 'medium' :
            params.kraken2_dbname == 'standard_8gb' ? 'medium' :
            'medium'
        }
    }

    withName: 'BRACKEN_BUILD' {
        memory = { params.kraken2_dbname == 'core_nt' ? '250 GB' : '24 GB' }
        cpus = 2
        time = { params.kraken2_dbname == 'core_nt' ? '2h' : '1h' }
    }
}
